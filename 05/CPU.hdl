// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A]) - x
        instruction[16], // Instruction for execution - x
        reset;           // Signals whether to re-start the current - x
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output - x
        writeM,          // Write to M?  - x
        addressM[15],    // Address in data memory (of M) - x
        pc[15];          // address of next instruction - x

    PARTS:
    // a-instruction: 0xxxxxxxxxxxxxxx
    // c-instruction: 1xxaccccccdddjjj
    // x not used
    // a (instruction[12]): if 0, use A; if 1, use M[A]
    // cccccc (instruction[11-6]): calculation on D and M/A
    // for each of ddd (instruction[5-3]), if 1, store value in each register (ADM)
    // for jjj (instruction[2-0]), in order, jump if value <0, ==0, >0
    // Put your code here:

    // Use instruction[15] to determine which should be used as A register input:
    // instruction (if a-type instruction) or ALU output from last clock cycle (if c-type)
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=muxOut1);
    // Reverse first instruction bit to make a-instruction indicator positive
    Not(in=instruction[15], out=notInst15);
    // Load the A register if a-instruction, or if c-instruction indicates saving
    Or(a=notInst15, b=instruction[5], out=aRegisterLoad);
    // A register
    ARegister(in=muxOut1, load=aRegisterLoad, out=aRegisterOut);
    // And16 to make aRegisterOut external as addressM
    And16(a=aRegisterOut, b[0..15]=true, out[0..14]=addressM);
    // Decide if A or M[A] should be used
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=muxOut2);
    // Load the D register if c-instruction and if saving is indicated
    And(a=instruction[15], b=instruction[4], out=dRegisterLoad);
    // D register
    DRegister(in=aluOutput, load=dRegisterLoad, out=dRegisterOut);
    // ALU
    ALU(
        x=dRegisterOut,
        y=muxOut2,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOutput,
        zr=zr,
        ng=ng
    );
    // And16 to make aluOutput external as outM
    And16(a=aluOutput, b[0..15]=true, out=outM);
    // Write to M if c-instruction and if saving is indicated
    And(a=instruction[15], b=instruction[3], out=writeM);
    // Logic to determine if jump should happen -- aka, PC should be loaded
    // with value from A register
    // First, check if ALU output is negative and negative jump bit is true
    And(a=ng, b=instruction[2], out=negJump);
    // Second, check if ALU output is 0 and 0 jump bit is true
    And(a=zr, b=instruction[1], out=zeroJump);
    // 3a, determine if neither ng or zr are true, thus ALU output is positive
    Nor(a=ng, b=zr, out=ps);
    // 3b, check it ALU output is positive and positive jump bit is true
    And(a=ps, b=instruction[0], out=posJump);
    // 4, jump if any of the above are true
    Or(a=negJump, b=zeroJump, out=negOrZeroJump);
    Or(a=negOrZeroJump, b=posJump, out=mayJump);
    // 5, only jump if c instruction
    And(a=mayJump, b=instruction[15], out=loadPc);
    // program counter
    PC(in=aRegisterOut, load=loadPc, inc=true, reset=reset, out[0..14]=pc);
}